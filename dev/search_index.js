var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"\nCurrentModule = SimilaritySearch\nDocTestSetup = quote\n    using SimilaritySearch\nend","category":"page"},{"location":"api/#Indexes","page":"API","title":"Indexes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ExhaustiveSearch\nParellelExhaustiveSearch\nSearchGraph","category":"page"},{"location":"api/#SimilaritySearch.ExhaustiveSearch","page":"API","title":"SimilaritySearch.ExhaustiveSearch","text":"ExhaustiveSearch(dist::SemiMetric, db::AbstractVector)\n\nSolves queries evaluating dist for the query and all elements in the dataset\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SearchGraph","page":"API","title":"SimilaritySearch.SearchGraph","text":"struct SearchGraph <: AbstractSearchContext\n\nSearchGraph index. It stores a set of points that can be compared through a distance function dist. The performance is determined by the search algorithm search_algo and the neighborhood policy. It supports callbacks to adjust parameters as insertions are made.\n\nhints: Initial points for exploration (empty hints imply using random points)\n\nNote: Parallel insertions should be made through append! or index! function with parallel_block > 1\n\n\n\n\n\n","category":"type"},{"location":"api/#Searching","page":"API","title":"Searching","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"search\nsearchbatch","category":"page"},{"location":"api/#SimilaritySearch.search","page":"API","title":"SimilaritySearch.search","text":"search(seq::ExhaustiveSearch, q, res::KnnResult)\n\nSolves the query evaluating all items in the given query.\n\n\n\n\n\nsearch(ex::ParallelExhaustiveSearch, q, res::KnnResult; pools=nothing)\n\nSolves the query evaluating all items in the given query.\n\n\n\n\n\nsearch(bs::BeamSearch, index::SearchGraph, q, res, hints, pools; bsize=bs.bsize, Δ=bs.Δ, maxvisits=bs.maxvisits)\n\nTries to reach the set of nearest neighbors specified in res for q.\n\nbs: the parameters of BeamSearch\nindex: the local search index\nq: the query\nres: The result object, it stores the results and also specifies the kind of query\nhints: Starting points for searching, randomly selected when it is an empty collection\npools: A SearchGraphPools object with preallocated pools\n\nOptional arguments (defaults to values in bs)\n\nbsize: Beam size\nΔ: exploration expansion factor\nmaxvisits: Maximum number of nodes to visit (distance evaluations)\n\n\n\n\n\nsearch(index::SearchGraph, q, res; hints=index.hints, pools=getpools(index))\n\nSolves the specified query res for the query object q.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.searchbatch","page":"API","title":"SimilaritySearch.searchbatch","text":"searchbatch(index, Q, k::Integer; parallel=false, pools=GlobalKnnResult) -> indices, distances\n\nSearches a batch of queries in the given index (searches for k neighbors).\n\nparallel specifies if the query should be solved in parallel at object level (each query is sequentially solved but many queries solved in different threads).\npool relevant if parallel=true. If it is explicitly given it should be an array of Threads.nthreads() preallocated KnnResult objects used to reduce memory allocations.   In most case uses the default is enought, but different pools should be used when indexes use internal indexes to solve queries (e.g., using index's proxies or database objects defined as indexes).\n\nNote: The i-th column in indices and distances correspond to the i-th query in Q Note: The final indices at each column can be 0 if the search process was unable to retrieve k neighbors.\n\n\n\n\n\nsearchbatch(index, Q, I::AbstractMatrix{Int32}, D::AbstractMatrix{Float32}; parallel=false, pools=getpools(index)) -> indices, distances\n\nSearches a batch of queries in the given index and I and D as output (searches for k=size(I, 1))\n\n\n\n\n\nsearchbatch(index, Q, KNN::AbstractVector{KnnResult}; parallel=false, pools=getpools(index)) -> indices, distances\n\nSearches a batch of queries in the given index using an array of KnnResult's; each KnnResult object can specify different k values.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Note: KnnResult based functions are significantly faster in general on pre-allocated objects that similar functions accepting matrices of identifiers and distances. Matrix based outputs are based on KnnResult methods that copy their results on the matrices. Preallocation is also costly, so if you have relatively small datasets, you are not intended to repeat the search process many times, or you are unsure, it is safe to use matrix-based functions.","category":"page"},{"location":"api/#Computing-all-knns","page":"API","title":"Computing all knns","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The operation of computing all knns in the index is computed as follows:","category":"page"},{"location":"api/","page":"API","title":"API","text":"allknn","category":"page"},{"location":"api/#SimilaritySearch.allknn","page":"API","title":"SimilaritySearch.allknn","text":"allknn(g::AbstractSearchContext, k::Integer; parallel=false, pools=getpools(g)) -> knns, dists\n\nComputes all the k nearest neighbors (all vs all) using the index g. It removes self references.\n\nParameters:\n\ng: the index\nk: the number of neighbors to retrieve\nparallel: If true, the construction will use all threads available threads\npools: A pools object, dependent of g\n\nReturns:\n\nknns a (k, n) matrix of identifiers; the i-th column corresponds to the i-th object in the dataset.   Zeros can happen to the end of each column meaning that the retrieval was less than the desired k\ndists a (k, n) matrix of distances; the i-th column corresponds to the i-th object in the dataset.   Zero values in knns should be ignored in dists\n\n\n\n\n\nallknn(g, knns, dists; parallel=false, pools=getpools(g)) -> knns, dists\n\nComputes all the k nearest neighbors (all vs all) using the index g. It removes self references.\n\nArguments:\n\ng: the index\nknns: an uninitialized integer matrix of (k, n) size for storing the k nearest neighbors of the n elements\ndists: an uninitialized floating point matrix of (k, n) size for storing the k nearest distances of the n elements\nparallel: If true, the construction will use all threads available threads\npools: A pools object, dependent of g\n\nResults:\n\nknns and dists are returned. Note that the index can retrieve less than k objects, and these are represented as zeros at the end of each column (can happen)\n\n\n\n\n\n","category":"function"},{"location":"api/#Computing-closest-pair","page":"API","title":"Computing closest pair","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The operation of finding the closest pair of elements in the indexed dataset.","category":"page"},{"location":"api/","page":"API","title":"API","text":"closestpair","category":"page"},{"location":"api/#SimilaritySearch.closestpair","page":"API","title":"SimilaritySearch.closestpair","text":"closestpair(idx::AbstractSearchContext; parallel=false, pools=getpools(idx))\n\nFinds the closest pair among all elements in idx. If the index idx is approximate then pair of points could be also an approximation.\n\nArguments:\n\nidx: the search structure that indexes the set of points\n\nKeyword Arguments:\n\nparallel: If true then the algorithm uses all available threads to compute the closest pair\npools: The pools needed for the index. Only used for special cases, default values should work in most cases. See getpools for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Indexing-elements","page":"API","title":"Indexing elements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"push!(::SearchGraph, item)\npush_item!\nappend!\nindex!\nrebuild","category":"page"},{"location":"api/#Base.push!-Tuple{SearchGraph, Any}","page":"API","title":"Base.push!","text":"push!(\n    index::SearchGraph,\n    item;\n    neighborhood=Neighborhood(),\n    push_item=true,\n    callbacks=SearchGraphCallbacks(),\n    pools=getpools(index)\n)\n\nAppends an object into the index. It accepts the same arguments that push! but assuming some default values.\n\nArguments:\n\nindex: The search graph index where the insertion is going to happen\nitem: The object to be inserted, it should be in the same space than other objects in the index and understood by the distance metric.\nneighborhood: A Neighborhood object that specifies the kind of neighborhood that will be computed.\npush_item: if push_item=false is an internal option, used by append! and index! (it avoids to insert item into the database since it is already inserted but not indexed)\ncallbacks: The set of callbacks that are called whenever the index grows enough. Keeps hyperparameters and structure in shape.\npools: The set of caches used for searching.\nNote: callbacks=nothing ignores the execution of any callback\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.push_item!","page":"API","title":"SimilaritySearch.push_item!","text":"push_item!(\n    index::SearchGraph,\n    item,\n    neighborhood,\n    push_item,\n    callbacks,\n    pools\n)\n\nAppends an object into the index\n\nArguments:\n\nindex: The search graph index where the insertion is going to happen.\nitem: The object to be inserted, it should be in the same space than other objects in the index and understood by the distance metric.\nneighborhood: A Neighborhood object that specifies the kind of neighborhood that will be computed.\npush_item: if false is an internal option, used by append! and index! (it avoids to insert item into the database since it is already inserted but not indexed).\ncallbacks: The set of callbacks that are called whenever the index grows enough. Keeps hyperparameters and structure in shape.\npools: The set of caches used for searching.\nNote: setting callbacks as nothing ignores the execution of any callback\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.append!","page":"API","title":"Base.append!","text":"append!(\n    index::SearchGraph,\n    db;\n    neighborhood=Neighborhood(),\n    parallel_block=1,\n    parallel_minimum_first_block=parallel_block,\n    callbacks=SearchGraphCallbacks(),\n    pools=getpools(index)\n)\n\nAppends all items in db to the index. It can be made in parallel or sequentially.\n\nArguments:\n\nindex: the search graph index\nneighborhood: A Neighborhood object that specifies the kind of neighborhood that will be computed.\ndb: the collection of objects to insert, an AbstractDatabase is the canonical input, but supports any iterable objects\nparallel_block: The number of elements that the multithreading algorithm process at once,   it is important to be larger that the number of available threads but not so large since the quality of the search graph could degrade (a few times the number of threads is enough).   If parallel_block=1 the algorithm becomes sequential.\nparallel_minimum_first_block: The number of sequential appends before running parallel.\n\nNote: Parallel doesn't trigger callbacks inside blocks.\n\ncallbacks: A SearchGraphCallbacks object to be called after some insertions   (specified by the callbacks object). These callbacks are used to maintain the algorithm   in good shape after many insertions (adjust hyperparameters and the structure).\npools: The set of caches used for searching.\n\nNote 1: Callbacks are not executed inside parallel blocks Note 2: Callbacks will be ignored if callbacks=nothing\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.index!","page":"API","title":"SimilaritySearch.index!","text":"index!(index::SearchGraph; parallel_block=1, parallel_minimum_first_block=parallel_block, callbacks=SearchGraphCallbacks())\n\nIndexes the already initialized database (e.g., given in the constructor method). It can be made in parallel or sequentially. The arguments are the same than append! function but using the internal index.db as input.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.rebuild","page":"API","title":"SimilaritySearch.rebuild","text":"rebuild(g::SearchGraph; neighborhood=Neighborhood(), callbacks=SearchGraphCallbacks(), pools=getpools(index))\n\nRebuilds the SearchGraph index but seeing the whole dataset for the incremental construction, i.e., it can connect the i-th vertex to its knn in the 1..n possible vertices instead of its knn among 1..(i-1) as in the original algorithm.\n\nArguments\n\ng: The search index to be rebuild.\nneighborhood: The neighborhood strategy to follow in the rebuild, it can differ from the original one.\ncallbacks: The set of callbacks\npools: The set of caches for the indexes\n\n\n\n\n\n","category":"function"},{"location":"api/#Distance-functions","page":"API","title":"Distance functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The distance functions are defined to work under the evaluate(::metric, u, v) function (borrowed from Distances.jl package).","category":"page"},{"location":"api/#Cosine-and-angle-distances-for-vectors","page":"API","title":"Cosine and angle distances for vectors","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CosineDistance\nNormalizedCosineDistance\nAngleDistance\nNormalizedAngleDistance","category":"page"},{"location":"api/#SimilaritySearch.CosineDistance","page":"API","title":"SimilaritySearch.CosineDistance","text":"CosineDistance()\n\nThe cosine is defined as:\n\ncos(u v) = fracsum_i u_i v_isqrtsum_i u_i^2 sqrtsum_i v_i^2\n\nThe cosine distance is defined as 1 - cos(uv)\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.NormalizedCosineDistance","page":"API","title":"SimilaritySearch.NormalizedCosineDistance","text":"NormalizedCosineDistance()\n\nSimilar to CosineDistance but suppose that input vectors are already normalized, and therefore, reduced to simply one minus the dot product.\n\n1 - sum_i u_i v_i\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.AngleDistance","page":"API","title":"SimilaritySearch.AngleDistance","text":"AngleDistance()\n\nThe angle distance is defined as:\n\n(u v)= arccos(cos(u v))\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.NormalizedAngleDistance","page":"API","title":"SimilaritySearch.NormalizedAngleDistance","text":"NormalizedAngleDistance()\n\nSimilar to AngleDistance but suppose that input vectors are already normalized\n\narccos sum_i u_i v_i\n\n\n\n\n\n","category":"type"},{"location":"api/#Set-distance-functions","page":"API","title":"Set distance functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Set bbject are represented as ordered arrays","category":"page"},{"location":"api/","page":"API","title":"API","text":"JaccardDistance\nDiceDistance\nIntersectionDissimilarity\nCosineDistanceSet","category":"page"},{"location":"api/#SimilaritySearch.JaccardDistance","page":"API","title":"SimilaritySearch.JaccardDistance","text":"JaccardDistance()\n\nThe Jaccard distance is defined as\n\nJ(u v) = fracu cap vu cup v\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.DiceDistance","page":"API","title":"SimilaritySearch.DiceDistance","text":"DiceDistance()\n\nThe Dice distance is defined as\n\nD(u v) = frac2 u cap vu + v\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.IntersectionDissimilarity","page":"API","title":"SimilaritySearch.IntersectionDissimilarity","text":"IntersectionDissimilarity()\n\nThe intersection dissimilarity uses the size of the intersection as a mesuare of similarity as follows:\n\nI(u v) = 1 - fracu cap vmax u v\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.CosineDistanceSet","page":"API","title":"SimilaritySearch.CosineDistanceSet","text":"CosineDistanceSet()\n\nThe cosine distance for very sparse binary vectors represented as sorted lists of positive integers where ones occur.\n\n\n\n\n\n","category":"type"},{"location":"api/#String-alignment-distances","page":"API","title":"String alignment distances","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The following uses strings/arrays as input, i.e., objects follow the array interface. A broader set of distances for strings can be found in the StringDistances.jl package.","category":"page"},{"location":"api/","page":"API","title":"API","text":"CommonPrefixDissimilarity\nGenericLevenshteinDistance\nStringHammingDistance\nLevenshteinDistance\nLcsDistance","category":"page"},{"location":"api/#SimilaritySearch.CommonPrefixDissimilarity","page":"API","title":"SimilaritySearch.CommonPrefixDissimilarity","text":"CommonPrefixDissimilarity()\n\nUses the common prefix as a measure of dissimilarity between two strings\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.GenericLevenshteinDistance","page":"API","title":"SimilaritySearch.GenericLevenshteinDistance","text":"GenericLevenshteinDistance(;icost, dcost, rcost)\n\nThe levenshtein distance measures the minimum number of edit operations to convert one string into another. The costs insertion icost, deletion cost dcost, and replace cost rcost. Not thread safe, use a copy of for each thread.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.StringHammingDistance","page":"API","title":"SimilaritySearch.StringHammingDistance","text":"StringHammingDistance()\n\nThe hamming distance counts the differences between two equally sized strings\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.LevenshteinDistance","page":"API","title":"SimilaritySearch.LevenshteinDistance","text":"LevenshteinDistance()\n\nInstantiates a GenericLevenshteinDistance object to perform traditional levenshtein distance\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.LcsDistance","page":"API","title":"SimilaritySearch.LcsDistance","text":"LcsDistance()\n\nInstantiates a GenericLevenshteinDistance object to perform LCS distance\n\n\n\n\n\n","category":"function"},{"location":"api/#Distances-for-Cloud-of-points","page":"API","title":"Distances for Cloud of points","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"HausdorffDistance\nMinHausdorffDistance","category":"page"},{"location":"api/#SimilaritySearch.HausdorffDistance","page":"API","title":"SimilaritySearch.HausdorffDistance","text":"HausdorffDistance(dist::SemiMetric)\n\nHausdorff distance is defined as the maximum of the minimum between two clouds of points.\n\nHausdorff(U V) = maxmax_u in U nndist(u V) maxv in V nndist(v U) \n\nwhere nndist(u V) computes the distance of u to its nearest neighbor in V using the dist metric.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.MinHausdorffDistance","page":"API","title":"SimilaritySearch.MinHausdorffDistance","text":"MinHausdorffDistance(dist::SemiMetric)\n\nSimilar to HausdorffDistance but using minimum instead of maximum.\n\n\n\n\n\n","category":"type"},{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimilaritySearch]\nPrivate = false\nOrder = [:function, :type]","category":"page"},{"location":"api/#Distances.evaluate-Tuple{AngleDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::AngleDistance, a, b)\n\nComputes the angle  between twovectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{BinaryHammingDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::BinaryHammingDistance, a, b)\nevaluate(::BinaryHammingDistance, a::AbstractVector, b::AbstractVector) where {T<:Unsigned}\n\nComputes the binary hamming distance for bit types and arrays of bit types\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{CommonPrefixDissimilarity, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::CommonPrefixDissimilarity, a, b)\n\nComputes a dissimilarity based on the common prefix between two strings\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{CosineDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::CosineDistance, a, b)\n\nComputes the cosine distance between two vectors. Please use AngleDistance if you are expecting a metric function (cosine_distance is a faster alternative whenever the triangle inequality is not needed)\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{CosineDistanceSet, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::CosineDistanceSet, a, b)\n\nComputes the cosine distance where a and b are sorted lists of integers (emulating binary sparse vectores)\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{DiceDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::DiceDistance, a, b)\n\nComputes the Dice's distance of a and b both sets specified as sorted vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{GenericLevenshteinDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::GenericLevenshteinDistance, a, b)\n\nComputes the edit distance between two strings, this is a low level function\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{HausdorffDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(m::HausdorffDistance, u, v)\n\nComputes the Hausdorff distance between two cloud of points.\n\nu and v are iterables where each object can be measured with the internal distance dist\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{IntersectionDissimilarity, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::IntersectionDissimilarity, a, b)\n\nUses the intersection as a distance function (non-metric)\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{JaccardDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::JaccardDistance, a, b)\n\nComputes the Jaccard's distance of a and b both sets specified as sorted vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{L1Distance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::L1Distance, a, b)\n\nComputes the Manhattan's distance between a and b\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{L2Distance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::L2Distance, a, b)\n\nComputes the Euclidean's distance betweem a and b\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{LInftyDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::LInftyDistance, a, b)\n\nComputes the maximum distance or Chebyshev's distance\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{LpDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(lp::LpDistance, a, b)\n\nComputes generic Minkowski's distance\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{MinHausdorffDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(m::MinHausdorffDistance, u, v)\n\nComputes a variant of the Hausdorff distance that uses the minimum instead of the maximum. u and v are iterables where each object can be measured with the internal distance dist\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{NormalizedAngleDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::AngleDistance, a, b)\n\nComputes the angle  between twovectors. It supposes that all vectors are normalized\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{NormalizedCosineDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::NormalizedCosineDistance, a, b)\n\nComputes the cosine distance between two vectors, it expects normalized vectors. Please use NormalizedAngleDistance if you are expecting a metric function (cosine_distance is a faster alternative whenever the triangle inequality is not needed)\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{SqL2Distance, Any, Any}","page":"API","title":"Distances.evaluate","text":"evaluate(::SqL2Distance, a, b)\n\nComputes the squared Euclidean's distance between a and b\n\n\n\n\n\n","category":"method"},{"location":"api/#Distances.evaluate-Tuple{StringHammingDistance, Any, Any}","page":"API","title":"Distances.evaluate","text":" evaluate(::StringHammingDistance, a, b)\n\nComputes the hamming distance between two sequences of the same length\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.LcsDistance-Tuple{}","page":"API","title":"SimilaritySearch.LcsDistance","text":"LcsDistance()\n\nInstantiates a GenericLevenshteinDistance object to perform LCS distance\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.LevenshteinDistance-Tuple{}","page":"API","title":"SimilaritySearch.LevenshteinDistance","text":"LevenshteinDistance()\n\nInstantiates a GenericLevenshteinDistance object to perform traditional levenshtein distance\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.allknn-Tuple{AbstractSearchContext, AbstractMatrix{Int32}, AbstractMatrix{Float32}}","page":"API","title":"SimilaritySearch.allknn","text":"allknn(g, knns, dists; parallel=false, pools=getpools(g)) -> knns, dists\n\nComputes all the k nearest neighbors (all vs all) using the index g. It removes self references.\n\nArguments:\n\ng: the index\nknns: an uninitialized integer matrix of (k, n) size for storing the k nearest neighbors of the n elements\ndists: an uninitialized floating point matrix of (k, n) size for storing the k nearest distances of the n elements\nparallel: If true, the construction will use all threads available threads\npools: A pools object, dependent of g\n\nResults:\n\nknns and dists are returned. Note that the index can retrieve less than k objects, and these are represented as zeros at the end of each column (can happen)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.allknn-Tuple{AbstractSearchContext, Integer}","page":"API","title":"SimilaritySearch.allknn","text":"allknn(g::AbstractSearchContext, k::Integer; parallel=false, pools=getpools(g)) -> knns, dists\n\nComputes all the k nearest neighbors (all vs all) using the index g. It removes self references.\n\nParameters:\n\ng: the index\nk: the number of neighbors to retrieve\nparallel: If true, the construction will use all threads available threads\npools: A pools object, dependent of g\n\nReturns:\n\nknns a (k, n) matrix of identifiers; the i-th column corresponds to the i-th object in the dataset.   Zeros can happen to the end of each column meaning that the retrieval was less than the desired k\ndists a (k, n) matrix of distances; the i-th column corresponds to the i-th object in the dataset.   Zero values in knns should be ignored in dists\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.closestpair-Tuple{AbstractSearchContext}","page":"API","title":"SimilaritySearch.closestpair","text":"closestpair(idx::AbstractSearchContext; parallel=false, pools=getpools(idx))\n\nFinds the closest pair among all elements in idx. If the index idx is approximate then pair of points could be also an approximation.\n\nArguments:\n\nidx: the search structure that indexes the set of points\n\nKeyword Arguments:\n\nparallel: If true then the algorithm uses all available threads to compute the closest pair\npools: The pools needed for the index. Only used for special cases, default values should work in most cases. See getpools for more information.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.find_neighborhood-Tuple{SearchGraph, Any, Neighborhood, SearchGraphPools}","page":"API","title":"SimilaritySearch.find_neighborhood","text":"find_neighborhood(index::SearchGraph{T}, item, neighborhood, pools; hints=index.hints)\n\nSearches for item neighborhood in the index, i.e., if item were in the index whose items should be its neighbors (intenal function). res is always reused since reduce creates a new KnnResult from it (a copy if reduce in its simpler terms)\n\nArguments\n\nindex: The search index.\nitem: The item to be inserted.\nneighborhood: A Neighborhood object that describes how to compute item's neighborhood.\npools: Cache pools to be used\nhints: Search hints\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.getknnresult","page":"API","title":"SimilaritySearch.getknnresult","text":"getknnresult(k::Integer, pools=nothing) -> KnnResult\n\nGeneric function to obtain a shared result set for the same thread and avoid memory allocations. This function should be specialized for indexes and pools that use shared results or threads in some special way.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.index!-Tuple{SearchGraph}","page":"API","title":"SimilaritySearch.index!","text":"index!(index::SearchGraph; parallel_block=1, parallel_minimum_first_block=parallel_block, callbacks=SearchGraphCallbacks())\n\nIndexes the already initialized database (e.g., given in the constructor method). It can be made in parallel or sequentially. The arguments are the same than append! function but using the internal index.db as input.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.macrorecall","page":"API","title":"SimilaritySearch.macrorecall","text":"macrorecall(goldI::AbstractMatrix, resI::AbstractMatrix, k=size(goldI, 1))::Float64\n\nComputes the macro recall score using goldI as gold standard and resI as predictions; it expects that matrices of integers (identifiers). If k is given, then the results are cut to first k.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.macrorecall-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"API","title":"SimilaritySearch.macrorecall","text":"macrorecall(goldlist::AbstractVector, reslist::AbstractVector)::Float64\n\nComputes the macro recall score using sets of results (KnnResult objects or vectors of itegers).\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.maxlength-Tuple{KnnResult}","page":"API","title":"SimilaritySearch.maxlength","text":"maxlength(res::KnnResult)\n\nThe maximum allowed cardinality (the k of knn)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.neardup-Tuple{AbstractSearchContext, AbstractDatabase, Real}","page":"API","title":"SimilaritySearch.neardup","text":"neardup(idx::AbstractSearchContext, X::AbstractVector, ϵ)\n\nFind nearest duplicates in database X using the empty index idx. The algorithm iteratively try to index elements in X, and items being near than ϵ to some element in idx will be ignored.\n\nThe function returns a named tuple (idx, map, nn, dist) where:\n\nidx: it is the index of the non duplicated elements\nmap: a mapping from 1-|idx| to its positions in X\nnn: an array where each element in x in X points to its covering element (previously indexed element u such that d(u x_i) leq ϵ)\ndist: an array of distance values to each covering element (correspond to each element in nn)\n\nArguments\n\nidx: An empty index (i.e., a SearchGraph)\nX: The input dataset\nϵ: Real value to cut\n\nNotes\n\nThe index idx must support incremental construction with push!\nYou can access the set of elements being 'ϵ'-non duplicates (the ϵ-net) using idx.db or where nn[i] == i\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.optimize!","page":"API","title":"SimilaritySearch.optimize!","text":"optimize!(\n    index::AbstractSearchContext,\n    kind::ErrorFunction=ParetoRecall(),\n    space::AbstractSolutionSpace=optimization_space(index);\n    queries=nothing,\n    ksearch=10,\n    numqueries=64,\n    initialpopulation=8,\n    verbose=false,\n    params=SearchParams(; maxpopulation=8, bsize=4, mutbsize=8, crossbsize=2, tol=-1.0, maxiters=8, verbose)\n)\n\nTries to configure the index to achieve the specified performance (kind). The optimization procedure is an stochastic search over the configuration space yielded by kind and queries.\n\nArguments\n\nindex: the index to be optimized\nkind: The kind of optimization to apply, it can be ParetoRecall(), ParetoRadius() or MinRecall(r) where r is the expected recall (0-1, 1 being the best quality but at cost of the search time)\n\nKeyword arguments\n\nqueries: the set of queries to be used to measure performances, a validation set. It can be an AbstractDatabase or nothing.\nqueries_ksearch: the number of neighbors to retrieve for queries\nqueries_size: if queries===nothing then a sample of the already indexed database is used, queries_size is the size of the sample.\ninitialpopulation: the initial sample for the optimization procedure\nspace: defines the search space\nparams: the parameters of the solver, see search_models function from SearchModels.jl package for more information.\nverbose: controls if the procedure is verbose or not\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.push_item!-Tuple{SearchGraph, Any, Neighborhood, Bool, SearchGraphCallbacks, SearchGraphPools}","page":"API","title":"SimilaritySearch.push_item!","text":"push_item!(\n    index::SearchGraph,\n    item,\n    neighborhood,\n    push_item,\n    callbacks,\n    pools\n)\n\nAppends an object into the index\n\nArguments:\n\nindex: The search graph index where the insertion is going to happen.\nitem: The object to be inserted, it should be in the same space than other objects in the index and understood by the distance metric.\nneighborhood: A Neighborhood object that specifies the kind of neighborhood that will be computed.\npush_item: if false is an internal option, used by append! and index! (it avoids to insert item into the database since it is already inserted but not indexed).\ncallbacks: The set of callbacks that are called whenever the index grows enough. Keeps hyperparameters and structure in shape.\npools: The set of caches used for searching.\nNote: setting callbacks as nothing ignores the execution of any callback\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.push_neighborhood!-Tuple{SearchGraph, Any, Any, Any}","page":"API","title":"SimilaritySearch.push_neighborhood!","text":"push_neighborhood!(index::SearchGraph, item, neighbors, callbacks; push_item=true)\n\nInserts the object item into the index, i.e., creates an edge for each item in neighbors (internal function)\n\nArguments\n\nindex: The search index to be modified.\nitem: The item that will be inserted.\nneighbors: An array of indices that will be connected to the new vertex.\ncallbacks: A [SearchGraphCallbacks] object (callback list) that will be called after some insertions\npush_item: Specifies if the item must be inserted into the internal db (sometimes is already there like in index!)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.rebuild-Tuple{SearchGraph}","page":"API","title":"SimilaritySearch.rebuild","text":"rebuild(g::SearchGraph; neighborhood=Neighborhood(), callbacks=SearchGraphCallbacks(), pools=getpools(index))\n\nRebuilds the SearchGraph index but seeing the whole dataset for the incremental construction, i.e., it can connect the i-th vertex to its knn in the 1..n possible vertices instead of its knn among 1..(i-1) as in the original algorithm.\n\nArguments\n\ng: The search index to be rebuild.\nneighborhood: The neighborhood strategy to follow in the rebuild, it can differ from the original one.\ncallbacks: The set of callbacks\npools: The set of caches for the indexes\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.recallscore-Tuple{Any, Any}","page":"API","title":"SimilaritySearch.recallscore","text":"recallscore(gold::Set, res)\n\nCompute recall and precision scores from the result sets.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.reuse!","page":"API","title":"SimilaritySearch.reuse!","text":"reuse!(res::KnnResult)\nreuse!(res::KnnResult, k::Integer)\n\nReturns a result set and a new initial state; reuse the memory buffers\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.search-Tuple{BeamSearch, SearchGraph, Any, Any, Any, SearchGraphPools}","page":"API","title":"SimilaritySearch.search","text":"search(bs::BeamSearch, index::SearchGraph, q, res, hints, pools; bsize=bs.bsize, Δ=bs.Δ, maxvisits=bs.maxvisits)\n\nTries to reach the set of nearest neighbors specified in res for q.\n\nbs: the parameters of BeamSearch\nindex: the local search index\nq: the query\nres: The result object, it stores the results and also specifies the kind of query\nhints: Starting points for searching, randomly selected when it is an empty collection\npools: A SearchGraphPools object with preallocated pools\n\nOptional arguments (defaults to values in bs)\n\nbsize: Beam size\nΔ: exploration expansion factor\nmaxvisits: Maximum number of nodes to visit (distance evaluations)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.search-Tuple{ExhaustiveSearch, Any, KnnResult}","page":"API","title":"SimilaritySearch.search","text":"search(seq::ExhaustiveSearch, q, res::KnnResult)\n\nSolves the query evaluating all items in the given query.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.search-Tuple{ParallelExhaustiveSearch, Any, KnnResult}","page":"API","title":"SimilaritySearch.search","text":"search(ex::ParallelExhaustiveSearch, q, res::KnnResult; pools=nothing)\n\nSolves the query evaluating all items in the given query.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.search-Tuple{SearchGraph, Any, KnnResult}","page":"API","title":"SimilaritySearch.search","text":"search(index::SearchGraph, q, res; hints=index.hints, pools=getpools(index))\n\nSolves the specified query res for the query object q.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.searchbatch-Tuple{Any, Any, AbstractMatrix{Int32}, AbstractMatrix{Float32}}","page":"API","title":"SimilaritySearch.searchbatch","text":"searchbatch(index, Q, I::AbstractMatrix{Int32}, D::AbstractMatrix{Float32}; parallel=false, pools=getpools(index)) -> indices, distances\n\nSearches a batch of queries in the given index and I and D as output (searches for k=size(I, 1))\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.searchbatch-Tuple{Any, Any, AbstractVector{KnnResult}}","page":"API","title":"SimilaritySearch.searchbatch","text":"searchbatch(index, Q, KNN::AbstractVector{KnnResult}; parallel=false, pools=getpools(index)) -> indices, distances\n\nSearches a batch of queries in the given index using an array of KnnResult's; each KnnResult object can specify different k values.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.searchbatch-Tuple{Any, Any, Integer}","page":"API","title":"SimilaritySearch.searchbatch","text":"searchbatch(index, Q, k::Integer; parallel=false, pools=GlobalKnnResult) -> indices, distances\n\nSearches a batch of queries in the given index (searches for k neighbors).\n\nparallel specifies if the query should be solved in parallel at object level (each query is sequentially solved but many queries solved in different threads).\npool relevant if parallel=true. If it is explicitly given it should be an array of Threads.nthreads() preallocated KnnResult objects used to reduce memory allocations.   In most case uses the default is enought, but different pools should be used when indexes use internal indexes to solve queries (e.g., using index's proxies or database objects defined as indexes).\n\nNote: The i-th column in indices and distances correspond to the i-th query in Q Note: The final indices at each column can be 0 if the search process was unable to retrieve k neighbors.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.timedsearchbatch-Tuple{Any, Any, Integer}","page":"API","title":"SimilaritySearch.timedsearchbatch","text":"timedsearchbatch(index, Q, ksearch::Integer; parallel=false)\n\nComputes the K nearest neigbors of each object in Q and returns two matrices, and the average search time in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.AbstractDatabase","page":"API","title":"SimilaritySearch.AbstractDatabase","text":"abstract type AbstractDatabase end\n\nBase type to represent databases. A database is a collection of objects that can be accessed like a similar interface to AbstractVector. It is separated to allow SimilaritySearch methods to know what is a database and what is an object (since most object representations will look as vectors and matrices). \n\nThe basic implementations are:\n\nMatrixDatabase: A wrapper for object-vectors stored in a Matrix, columns are the objects. It is static.\nDynamicMatrixDatabase: A dynamic representation for vectors that allows adding new vectors.\nVectorDatabase: A wrapper for vector-like structures. It can contain any kind of objects.\nSubDatabase: A sample of a given database\n\nIn particular, the storage details are not used by VectorDatabase and MatrixDatabase. For instance, it is possible to use matrices like Matrix, SMatrix or StrideArrays; or even use generated objects with VectorDatabase (supporting a vector-like interface).\n\nIf the storage backend support it, it is possible to use vector operations, for example:\n\nget the i-th element obj = db[i], elements in the database are identified by position\nget the elements list in a list of indices lst as db[lst] (also using view)\nset a value at the i-th element db[i] = obj\nrandom sampling rand(db), rand(db, 3)\niterate and collect objects in the database\nget the number of elements in the database length(db)\nadd new objects to the end of the database (not all internal containers will support it)\npush!(db, u) adds a single element u\nappend!(db, lst) adds a list of objects to the end of the database\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.BeamSearch","page":"API","title":"SimilaritySearch.BeamSearch","text":"BeamSearch(bsize::Integer=16, Δ::Float32)\n\nBeamSearch is an iteratively improving local search algorithm that explores the graph using blocks of bsize elements and neighborhoods at the time.\n\nbsize: The size of the beam.\nΔ: Soft margin for accepting elements into the beam\nmaxvisits: MAximum visits while searching, useful for early stopping without convergence\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.BinaryHammingDistance","page":"API","title":"SimilaritySearch.BinaryHammingDistance","text":"BinaryHammingDistance()\n\nBinary hamming uses bit wise operations to count the differences between bit strings\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.Callback","page":"API","title":"SimilaritySearch.Callback","text":"abstract type Callback end\n\nAbstract type to trigger callbacks after some number of insertions. SearchGraph stores the callbacks in callbacks (a dictionary that associates symbols and callback objects); A SearchGraph object controls when callbacks are fired using callback_logbase and callback_starting\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.DisjointHints","page":"API","title":"SimilaritySearch.DisjointHints","text":"mutable struct DisjointHints\n\nIndicates that hints are a small disjoint (untouched neighbors) subsample \n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.DistalSatNeighborhood","page":"API","title":"SimilaritySearch.DistalSatNeighborhood","text":"DistalSatNeighborhood()\n\nNew items are connected with a small set of items computed with a Distal SAT like scheme (cite). It starts with k near items that are reduced to a small neighborhood due to the SAT partitioning stage but in reverse order of distance.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.DynamicMatrixDatabase","page":"API","title":"SimilaritySearch.DynamicMatrixDatabase","text":"struct DynamicMatrixDatabase{DType,Dim} <: AbstractDatabase\n\nA dynamic matrix with elements of type DType and dimension Dim \n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.DynamicMatrixDatabase-Tuple{MatrixDatabase}","page":"API","title":"SimilaritySearch.DynamicMatrixDatabase","text":"DynamicMatrixDatabase(M::MatrixDatabase)\n\nCreates a DynamicMatrixDatabase from a MatrixDatabase, copies internal data. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.DynamicMatrixDatabase-Union{Tuple{AbstractMatrix{DType}}, Tuple{DType}} where DType","page":"API","title":"SimilaritySearch.DynamicMatrixDatabase","text":"DynamicMatrixDatabase(matrix::AbstractMatrix{DType})\n\nCreates a DynamicMatrixDatabase from a matrix-like object. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.DynamicMatrixDatabase-Union{Tuple{DType}, Tuple{Type{DType}, Integer}} where DType","page":"API","title":"SimilaritySearch.DynamicMatrixDatabase","text":"DynamicMatrixDatabase(::Type{DType}, Dim::Integer)\n\nCreates an empty DynamicMatrixDatabase such that length(db[i]) == Dim and eltype(db[i]) == DType\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.DynamicMatrixDatabase-Union{Tuple{DynamicMatrixDatabase{DType, Dim}}, Tuple{Dim}, Tuple{DType}} where {DType, Dim}","page":"API","title":"SimilaritySearch.DynamicMatrixDatabase","text":"DynamicMatrixDatabase(V::DynamicMatrixDatabase{DType,Dim})\n\nCreates a DynamicMatrixDatabase from another DynamicMatrixDatabase, they will share their internal data. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.IdentityNeighborhood","page":"API","title":"SimilaritySearch.IdentityNeighborhood","text":"struct IdentityNeighborhood\n\nIt does not modifies the given neighborhood\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.KDisjointHints","page":"API","title":"SimilaritySearch.KDisjointHints","text":"struct KDisjointHints\n\nIndicates that hints are selected to have a disjoint neighborhood\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.KnnResult","page":"API","title":"SimilaritySearch.KnnResult","text":"KnnResult(ksearch::Integer)\n\nCreates a priority queue with fixed capacity (ksearch) representing a knn result set. It starts with zero items and grows with push!(res, id, dist) calls until ksearch size is reached. After this only the smallest items based on distance are preserved.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.L1Distance","page":"API","title":"SimilaritySearch.L1Distance","text":"L1Distance()\n\nThe manhattan distance or L_1 is defined as\n\nL_1(u v) = sum_iu_i - v_i\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.L2Distance","page":"API","title":"SimilaritySearch.L2Distance","text":"L2Distance()\n\nThe euclidean distance or L_2 is defined as\n\nL_2(u v) = sqrtsum_i(u_i - v_i)^2\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.LInftyDistance","page":"API","title":"SimilaritySearch.LInftyDistance","text":"LInftyDistance()\n\nThe Chebyshev or L_infty distance is defined as\n\nL_infty(u v) = max_ileft u_i - v_i right\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.LpDistance","page":"API","title":"SimilaritySearch.LpDistance","text":"LpDistance(p)\nLpDistance(p, pinv)\n\nThe general Minkowski distance L_p distance is defined as\n\nL_p(u v) = leftsum_i(u_i - v_i)^pright^1p\n\nWhere p_inv = 1p. Note that you can specify unrelated p and pinv if you need an specific behaviour.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.MatrixDatabase","page":"API","title":"SimilaritySearch.MatrixDatabase","text":"struct MatrixDatabase{M<:AbstractDatabase} <: AbstractDatabase\n\nMatrixDatabase(matrix::AbstractMatrix)\n\nWraps a matrix-like object matrix into a MatrixDatabase. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.MatrixDatabase-Tuple{MatrixDatabase}","page":"API","title":"SimilaritySearch.MatrixDatabase","text":"MatrixDatabase(V::MatrixDatabase)\n\nCreates another MatrixDatabase from another MatrixDatabase. They will share their internal data. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.NegativeDistanceHack","page":"API","title":"SimilaritySearch.NegativeDistanceHack","text":"NegativeDistanceHack(dist)\n\nEvaluates as the negative of the distance function being wrapped. This is not a real distance function but a simple hack to get a similarity and use it for searching for farthest elements (farthest points / farthest pairs) on indexes that can handle this hack (e.g., ExhaustiveSearch, ParallelExhaustiveSearch, SearchGraph).\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.Neighborhood","page":"API","title":"SimilaritySearch.Neighborhood","text":"@with_kw mutable struct Neighborhood\n\nDetermines the size of the neighborhood, k is adjusted as a callback, and it is intended to affect previously inserted vertices. The neighborhood is designed to consider two components k=in+out, i.e. incoming and outgoing edges for each vertex.\n\nThe out size is computed as minsize + log(logbase n) where n is the current number of indexed elements; this is computed searching\n\nfor out  elements in the current index.\n\nThe in size is unbounded.\nreduce is intended to postprocess neighbors (after search process, i.e., once out edges are computed); do not change k but always must return a copy of the reduced result set.\n\nNote: Set logbase=Inf to obtain a fixed number of in nodes; and set minsize=0 to obtain a pure logarithmic growing neighborhood.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.ParallelExhaustiveSearch-Tuple{}","page":"API","title":"SimilaritySearch.ParallelExhaustiveSearch","text":"ParallelExhaustiveSearch(; dist=SqL2Distance(), db=VectorDatabase{Float32}())\n\nSolves queries evaluating dist in parallel for the query and all elements in the dataset. Note that this should not be used in conjunction with searchbatch(...; parallel=true) since they will compete for resources.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.RandomHints","page":"API","title":"SimilaritySearch.RandomHints","text":"mutable struct RandomHints\n\nIndicates that hints are a random sample of the dataset\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SatNeighborhood","page":"API","title":"SimilaritySearch.SatNeighborhood","text":"SatNeighborhood()\n\nNew items are connected with a small set of items computed with a SAT like scheme (cite). It starts with k near items that are reduced to a small neighborhood due to the SAT partitioning stage.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SearchGraphCallbacks","page":"API","title":"SimilaritySearch.SearchGraphCallbacks","text":"struct SearchGraphCallbacks     hints::Union{Nothing,Callback} = DisjointHints()     hyperparameters::Union{Nothing,Callback} = OptimizeParameters(kind=ParetoRecall())     logbase::Float32 = 1.5     starting::Int32 = 8 end\n\nCall insertions and indexing methods with SearchGraphCallbacks objects to control how the index structure is adjusted (callbacks are called when n  starting and lceil(log(logbase n)rceil = lceillog(logbase n+1)rceil)\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SearchGraphCallbacks-Tuple{SimilaritySearch.ErrorFunction}","page":"API","title":"SimilaritySearch.SearchGraphCallbacks","text":"SearchGraphCallbacks(kind::ErrorFunction;\n    hints=DisjointHints(),\n    logbase=1.5,\n    starting=8,\n    initialpopulation=16,\n    maxpopulation=initialpopulation,\n    maxiters=12,\n    bsize=4,\n    mutbsize=4bsize,\n    crossbsize=2bsize,\n    tol=-1.0,\n    params=SearchParams(; maxpopulation, bsize, mutbsize, crossbsize, tol, maxiters),\n    ksearch=10,\n    numqueries=32,\n    space::BeamSearchSpace=BeamSearchSpace()\n)\n\nConvenient constructor function to create SearchGraphCallbacks structs. See SearchGraphCallbacks, SearchParams, and BeamSearchSpace for more details.\n\nArguments\n\nkind: The kind of error function, e.g. MinRecall(0.9).\nhints: How search hints should be computed.\nlogbase: Controls the periodicity of callback executions.\nstarting: Controls the minimum size of the index before execute callbacks.\ninitialpopulation: Optimization argument that determines the initial number of configurations.\nmaxiters: Optimization argument that determines the number of iterations.\nbsize: Optimization argument that determines how many top configurations are allowed to mutate and cross.\ntol: Optimization argument that determines the minimal tolerance improvement to stop the optimization.\nparams: The SearchParams arguments (if separated optimization arguments are not enough)\nksearch: The number of neighbors to be retrived by the optimization process.\nnumqueries: The number of queries to be performed during the optimization process.\nspace: The cofiguration search space\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.SearchGraphPools","page":"API","title":"SimilaritySearch.SearchGraphPools","text":"SearchGraphPools(results=GlobalKnnResult, vstates=GlobalVisitedVertices, beams=GlobalBeamKnnResult)\n\nA set of pools to alleviate memory allocations in SearchGraph construction and searching. Relevant on multithreading scenarious where distance functions, evaluate can call other metric indexes that can use these shared resources (globally defined).\n\nEach pool is a vector of Threads.nthreads() preallocated objects of the required type.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SimilarityFromDistance","page":"API","title":"SimilaritySearch.SimilarityFromDistance","text":"SimilarityFromDistance(dist)\n\nEvaluates as 1(1 + d) for a distance evaluation d of dist. This is not a distance function and is part of the hacks to get a similarity  for searching farthest elements on indexes that can handle this hack (e.g., ExhaustiveSearch, ParallelExhaustiveSearch, SearchGraph).\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.SqL2Distance","page":"API","title":"SimilaritySearch.SqL2Distance","text":"SqL2Distance()\n\nThe squared euclidean distance is defined as\n\nL_2(u v) = sum_i(u_i - v_i)^2\n\nIt avoids the computation of the square root and should be used whenever you are able do it.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.VectorDatabase","page":"API","title":"SimilaritySearch.VectorDatabase","text":"struct VectorDatabase{V} <: AbstractDatabase\n\nA wrapper for vector-like databases\n\n\n\n\n\n","category":"type"},{"location":"api/#SimilaritySearch.VectorDatabase-Tuple{AbstractDatabase}","page":"API","title":"SimilaritySearch.VectorDatabase","text":"VectorDatabase(D::AbstractDatabase)\n\nCreates a VectorDatabase from an AbstractDatabase. It copies internal data. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.VectorDatabase-Tuple{T} where T<:(AbstractMatrix{T} where T)","page":"API","title":"SimilaritySearch.VectorDatabase","text":"VectorDatabase(M::AbstractMatrix)\n\nCreates a VectorDatabase from a matrix-like object. It will copy columns as objects  of the new VectorDatabase. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.VectorDatabase-Tuple{T} where T<:(AbstractVector{T} where T)","page":"API","title":"SimilaritySearch.VectorDatabase","text":"VectorDatabase(vecs::T)\n\nCreates a VectorDatabase from vecs. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.VectorDatabase-Tuple{VectorDatabase}","page":"API","title":"SimilaritySearch.VectorDatabase","text":"VectorDatabase(V::VectorDatabase)\n\nCreates a VectorDatabase from another an AbstractDatabase. They will share their internal data. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.VectorDatabase-Tuple{}","page":"API","title":"SimilaritySearch.VectorDatabase","text":"VectorDatabase(; type=Vector{Float32})\n\nCreates an empty VectorDatabase where each object is of type type. Please see AbstractDatabase for general usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-API","page":"API","title":"Private API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimilaritySearch]\nPublic = false\nOrder = [:function, :type]","category":"page"},{"location":"api/#Base.append!-Tuple{SearchGraph, Any}","page":"API","title":"Base.append!","text":"append!(\n    index::SearchGraph,\n    db;\n    neighborhood=Neighborhood(),\n    parallel_block=1,\n    parallel_minimum_first_block=parallel_block,\n    callbacks=SearchGraphCallbacks(),\n    pools=getpools(index)\n)\n\nAppends all items in db to the index. It can be made in parallel or sequentially.\n\nArguments:\n\nindex: the search graph index\nneighborhood: A Neighborhood object that specifies the kind of neighborhood that will be computed.\ndb: the collection of objects to insert, an AbstractDatabase is the canonical input, but supports any iterable objects\nparallel_block: The number of elements that the multithreading algorithm process at once,   it is important to be larger that the number of available threads but not so large since the quality of the search graph could degrade (a few times the number of threads is enough).   If parallel_block=1 the algorithm becomes sequential.\nparallel_minimum_first_block: The number of sequential appends before running parallel.\n\nNote: Parallel doesn't trigger callbacks inside blocks.\n\ncallbacks: A SearchGraphCallbacks object to be called after some insertions   (specified by the callbacks object). These callbacks are used to maintain the algorithm   in good shape after many insertions (adjust hyperparameters and the structure).\npools: The set of caches used for searching.\n\nNote 1: Callbacks are not executed inside parallel blocks Note 2: Callbacks will be ignored if callbacks=nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Tuple{Type{AbstractDatabase}, AbstractDatabase}","page":"API","title":"Base.convert","text":"convert(::Type{AbstractDatabase}, M::AbstractDatabase)\nconvert(::Type{AbstractDatabase}, M::AbstractMatrix)\nconvert(::Type{AbstractDatabase}, M::Vector)\nconvert(::Type{AbstractDatabase}, M::Vector{Any})\nconvert(::Type{AbstractDatabase}, M::AbstractVector)\nconvert(::Type{<:AbstractVector}, M::VectorDatabase)\nconvert(::Type{<:AbstractVector}, M::AbstractDatabase)\n\nConvenience functions to convert different kinds of data into a some kind of database. \n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eachindex-Tuple{AbstractDatabase}","page":"API","title":"Base.eachindex","text":"eachindex(db::AbstractDatabase)\n\nAn index iterator of db\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eltype-Union{Tuple{DynamicMatrixDatabase{DType, Dim}}, Tuple{Dim}, Tuple{DType}} where {DType, Dim}","page":"API","title":"Base.eltype","text":"eltype(db::DynamicMatrixDatabase{DType,Dim})\n\nThe type of stored elements AbstractVector{DType}\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.firstindex-Tuple{AbstractDatabase}","page":"API","title":"Base.firstindex","text":"firstindex(db::AbstractDatabase)\n\nFirst index in db (1)\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{AbstractDatabase, AbstractVector{T} where T}","page":"API","title":"Base.getindex","text":"getindex(db::AbstractDatabase, lst)\n\nA subset of db (using a collection of indexes lst)\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{KnnResult, Any}","page":"API","title":"Base.getindex","text":"getindex(res::KnnResult, i)\n\nAccess the i-th item in res\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.iterate","page":"API","title":"Base.iterate","text":"Base.iterate(res::KnnResult, state::Int=1)\n\nSupport for iteration\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.lastindex-Tuple{AbstractDatabase}","page":"API","title":"Base.lastindex","text":"lastindex(db::AbstractDatabase)\n\nLast index in db (1)\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.pop!-Tuple{KnnResult}","page":"API","title":"Base.pop!","text":"pop!(res::KnnResult)\n\nRemoves and returns the last item in the pool, it is an O(1) operation\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.popfirst!-Tuple{KnnResult}","page":"API","title":"Base.popfirst!","text":"popfirst!(p::KnnResult)\n\nRemoves and returns the nearest neeighboor pair from the pool, an O(length(p.pool)) operation\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Tuple{KnnResult, Integer, Real}","page":"API","title":"Base.push!","text":"push!(res::KnnResult, item::Pair)\npush!(res::KnnResult, id::Integer, dist::Real)\n\nAppends an item into the result set\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.rand-Tuple{AbstractDatabase, Integer}","page":"API","title":"Base.rand","text":"rand(db::AbstractDatabase, n)\n\nRetrieves n random elements from db, returnes a SubDatabase object\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.rand-Tuple{AbstractDatabase}","page":"API","title":"Base.rand","text":"rand(db::AbstractDatabase)\n\nRetrieves a random element from db\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.size-Tuple{AbstractDatabase}","page":"API","title":"Base.size","text":"size(db::AbstractDatabase)\n\nThe size of the database (length(db),). There is no concept of explicit dimension for AbstractDatabase implementations.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.view-Tuple{AbstractDatabase, Any}","page":"API","title":"Base.view","text":"view(db::AbstractDatabase, map)\n\nConstructs a SubDatabase from db using the specified indexes in map (e.g., an array or an slice of indices)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch._shifted_fixorder!-Tuple{KnnResult, Int64, Int64}","page":"API","title":"SimilaritySearch._shifted_fixorder!","text":"_shifted_fixorder!(res::KnnResult, sp, ep)\n\nSorts the result in place; the possible element out of order is on the last entry always. It implements a kind of insertion sort that it is efficient due to the expected distribution of the items being inserted (it is expected just a few elements smaller than the current ones)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.common_prefix-Tuple{Any, Any}","page":"API","title":"SimilaritySearch.common_prefix","text":"common_prefix(a, b)\n\nComputes the length of the common prefix among two strings represented as arrays\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.execute_callback-Tuple{KDisjointHints, Any}","page":"API","title":"SimilaritySearch.execute_callback","text":"execute_callback(opt::KDisjointHints, index)\n\nSearchGraph's callback for selecting hints at random\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.execute_callback-Tuple{OptimizeParameters, SearchGraph}","page":"API","title":"SimilaritySearch.execute_callback","text":"execute_callback(opt::OptimizeParameters, index::SearchGraph)\n\nSearchGraph's callback for adjunting search parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.execute_callback-Tuple{RandomHints, Any}","page":"API","title":"SimilaritySearch.execute_callback","text":"executed_callback(opt::RandomHints, index)\n\nSearchGraph's callback for selecting hints at random\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.execute_callbacks","page":"API","title":"SimilaritySearch.execute_callbacks","text":"execute_callbacks(index::SearchGraph, n=length(index), m=n+1)\n\nProcess all registered callbacks\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.intersectionsize","page":"API","title":"SimilaritySearch.intersectionsize","text":"intersectionsize(a, b, o=Forward)\n\nComputes the size the intersections of a and b, specified as ordered sequences.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimilaritySearch.neighborhoodreduce-Tuple{DistalSatNeighborhood, SearchGraph, Any, Any, SearchGraphPools}","page":"API","title":"SimilaritySearch.neighborhoodreduce","text":"reduce(sat::DistalSatNeighborhood, index::SearchGraph, item, res, pools)\n\nReduces res using the DistSAT strategy.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.unionsize-Tuple{Any, Any, Any}","page":"API","title":"SimilaritySearch.unionsize","text":"unionsize(a, b, isize)\n\nComputes the size of the union of a and b that have an intersection size isize\n\n\n\n\n\n","category":"method"},{"location":"api/#SimilaritySearch.NeighborhoodReduction","page":"API","title":"SimilaritySearch.NeighborhoodReduction","text":"abstract type NeighborhoodReduction end\n\nOverrides Base.reduce(::NeighborhoodReduction, res::KnnResult, index::SearchGraph) to postprocess res using some criteria. Called from find_neighborhood, and returns a new KnnResult struct (perhaps a copy of res) since push_neighborhood captures the reference of its output.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimilaritySearch","category":"page"},{"location":"#SimilaritySearch.jl","page":"Home","title":"SimilaritySearch.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SimilaritySearch.jl is a library for nearest neighbor search. In particular, it contains the implementation for SearchGraph, a fast and flexible search index.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following manuscript describes and benchmarks version 0.6:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{tellezscalable,\n  title={A scalable solution to the nearest neighbor search problem through local-search methods on neighbor graphs},\n  author={Tellez, Eric S and Ruiz, Guillermo and Chavez, Edgar and Graff, Mario},\n  journal={Pattern Analysis and Applications},\n  pages={1--15},\n  publisher={Springer}\n}\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"The current algorithm (version 0.8) is described and benchmarked in the following manuscript:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n@misc{tellez2022similarity,\n      title={Similarity search on neighbor's graphs with automatic Pareto optimal performance and minimum expected quality setups based on hyperparameter optimization}, \n      author={Eric S. Tellez and Guillermo Ruiz},\n      year={2022},\n      eprint={2201.07917},\n      archivePrefix={arXiv},\n      primaryClass={cs.IR}\n}","category":"page"},{"location":"#Installing-SimilaritySearch","page":"Home","title":"Installing SimilaritySearch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You may install the package as follows","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add SimilaritySearch.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"also, you can run the set of tests as follows","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test SimilaritySearch","category":"page"},{"location":"#Using-the-library","page":"Home","title":"Using the library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can find a brief tutorial and examples in https://github.com/sadit/SimilaritySearchDemos. You will find a list of Jupyter and Pluto notebooks, and some scripts that exemplifies its usage.","category":"page"}]
}
